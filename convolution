#!/usr/bin/python3
#+
# Pixman example: demonstration of various convolution filters.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import math
import qahirah as qah
from qahirah import \
    CAIRO
import pixman
from pixman import \
    PIXMAN, \
    Colour, \
    Point, \
    Transform

#+
# Miscellaneous useful stuff
#-

def draw_filtered(g, surf, filter, repeat, matrix) :
    "draws the qahirah.ImageSurface surf into the qahirah.Context g, applying" \
    " the pixman.Filter filter, the specified PIXMAN.REPEAT_xxx repeat setting," \
    " and the pixman.Transform matrix."
    temp = surf.create_like()
    pixman.image_composite \
      (
        op = PIXMAN.OP_SRC,
        src = pixman.Image.create_from_cairo_surface(surf).set_filter(filter).set_repeat(repeat),
        mask = None,
        dest = pixman.Image.create_from_cairo_surface(temp),
        src_pos = (0, 0),
        mask_pos = None,
        dest_pos = (0, 0),
        dimensions = surf.dimensions
      )
    temp.mark_dirty()
    (g
        .save()
        .transform(matrix)
        .rectangle(qah.Rect.from_dimensions(surf.dimensions))
        .clip()
        .set_source(qah.Pattern.create_for_surface(temp))
        .paint()
        .restore()
    )
#end draw_filtered

#+
# Useful filter functions
#-

def make_gaussian_filter(limit, radius = 1.0, gain = 1.0, peak = None, clip_peak = True) :
    "constructs a Gaussian blur filter. At least, I think this is a Gaussian blur." \
    " limit is the maximum radius in pixels, and radius is the fraction of limit at" \
    " which the coefficients fall off to exp(-2)."
    return \
        pixman.Filter.create_convolution_from_function \
          (
            func =
                (
                    lambda x, y : x == 0 and y == 0,
                    lambda x, y : math.exp(- (x * x + y * y) / radius)
                )[radius != 0.0],
            radius = limit,
            gain = gain,
            peak = peak,
            clip_peak = clip_peak
          )
#end make_gaussian_filter

def make_bokeh_filter(radius, nr_points, power, gain, peak, clip_peak) :
    "constructs a blur filter with a “bokeh” (star-shape halo) effect. nr_points" \
    " is the number of points on each star, while power defines the sharpness" \
    " of the points."

    def func(x, y) :
        angle = (math.atan2(y, x) / qah.circle - 0.25) * nr_points * math.pi
          # ensure rays are arranged from up direction (negative-y axis)
        return \
            math.exp(- x * x - y * y) * abs(math.cos(angle)) ** power
    #end func

    return \
        pixman.Filter.create_convolution_from_function \
          (
            func = func,
            radius = (radius, radius),
            gain = gain,
            peak = peak,
            clip_peak = clip_peak
          )
#end make_bokeh_filter

def make_ghost_filter(repeats) :
    "constructs a filter that produces a “ghosting” effect, where the original image" \
    " is repeated at one or more offset locations. repeats is a sequence of (position, intensity)" \
    " tuples, where each position is an integer pixman.Point indicating the position" \
    " of a repeat, relative to the original pixel at (0, 0), and intensity is the" \
    " relative intensity of the ghost (1.0 for the same intensity as the original image).\n" \
    "\n" \
    "If you want the original image to appear, then don’t forget to include a ((0, 0), 1.0)" \
    " tuple in repeats. Otherwise you will only get the ghosts."
    radius = Point(0, 0)
    for pos, intensity in repeats :
        pos = Point.from_tuple(pos).assert_isint()
          # I don't support fractional coordinates for now
        radius = Point(max(radius.x, abs(pos.x)), max(radius.y, abs(pos.y)))
    #end for
    dimensions = 2 * radius + Point(1, 1)
    coeffs = [0] * dimensions.x * dimensions.y
    for pos, intensity in repeats :
        pos = radius - Point.from_tuple(pos).assert_isint()
        coeffs[pos.y * dimensions.x + pos.x] = intensity
    #end for
    return \
        pixman.Filter.create_convolution(dimensions, coeffs)
#end make_ghost_filter

def make_blurred_ghost_filter(repeats) :
    "constructs a filter that produces a “ghosting” effect, where the original image" \
    " is repeated at one or more offset locations. repeats is a sequence of" \
    " (position, intensity, blur_radius) tuples, where each position is an integer" \
    " pixman.Point indicating the position of a repeat, relative to the original pixel" \
    " at (0, 0), intensity is the relative intensity of the ghost (1.0 for the same" \
    " intensity as the original image), and blur_radius is the amount of blurring to apply" \
    " to the ghost.\n" \
    "\n" \
    "If you want the original image to appear, then don’t forget to include a ((0, 0), 1.0, 0)" \
    " tuple in repeats. Otherwise you will only get the ghosts."
    radius = Point(0, 0)
    for pos, intensity, blur_radius in repeats :
        pos = Point.from_tuple(pos).assert_isint()
          # I don't support fractional coordinates for now
        radius = Point(max(radius.x, abs(pos.x)), max(radius.y, abs(pos.y)))
    #end for
    dimensions = 2 * radius + Point(1, 1)
    result = pixman.Filter.create_convolution(dimensions, [0] * dimensions.x * dimensions.y)
    for pos, intensity, blur_radius in repeats :
        pos = radius - Point.from_tuple(pos).assert_isint()
        result += make_gaussian_filter \
          (
            limit = dimensions,
            radius = blur_radius,
            gain = intensity,
          ).offset(pos).resize(dimensions)
    #end for
    return \
        result
#end make_blurred_ghost_filter

def make_streak_filter(direction, length, power, falloff, gain) :
    "constructs a filter that produces a streak with the specified direction and length." \
    " power controls the sharpness of the streak (fading with change of angle from direction)," \
    " while falloff determines how it fades with distance."
    radius = Point.unit(direction) * length
    radius = Point \
      (
        max(math.ceil(abs(radius.x)), 1),
        max(math.ceil(abs(radius.y)), 1)
      )
    def func(x, y) :
        x, y = Point.from_tuple((- x, - y)) * radius
        angle = math.atan2(y, x) - direction
        if abs(angle) < qah.circle / 8 :
            try :
                dist_factor = abs(Point(x, y)) ** - falloff
            except ZeroDivisionError :
                dist_factor = 1
            #end try
            result = dist_factor * abs(math.cos(angle)) ** power
        else :
            result = 0
        #end if
        return \
            result
    #end func
    return \
        pixman.Filter.create_convolution_from_function \
          (
            func = func,
            radius = radius,
            gain = gain
          )
#end make_streak_filter

#+
# Mainline
#-

filters = \
    ( # tuple of (name, filter) tuples
        ("None", None),
        ("Vertical Blur", make_gaussian_filter((5, 25))),
        ("Horizontal Blur", make_gaussian_filter((25, 5))),
        ("Uniform Blur", make_gaussian_filter((25, 25))),
        ("Smear", make_gaussian_filter((25, 25), radius = 8, gain = 2)),
        ("Halo", make_gaussian_filter((25, 25), gain = 2, peak = 1, clip_peak = False)),
        ("Tri Bokeh",
            make_bokeh_filter
              (
                radius = 15, nr_points = 3, power = 20, gain = 2, peak = 1, clip_peak = False
              )
        ),
        ("Quad Bokeh",
            make_bokeh_filter
              (
                radius = 15, nr_points = 4, power = 20, gain = 2, peak = 1, clip_peak = False
              )
        ),
        ("Hex Bokeh",
            make_bokeh_filter
              (
                radius = 15, nr_points = 6, power = 20, gain = 2, peak = 1, clip_peak = False
              )
        ),
        ("Ghosts 1", make_ghost_filter([((0, 0), 1), ((7, 5), 0.5), ((14, 10), 0.25)])),
        (
            "Ghosts 2",
            make_blurred_ghost_filter
              (
                [((0, 0), 1, 0.005), ((7, 5), 0.5, 0.01), ((14, 10), 0.25, 0.01)]
              )
        ),
        ("Streak", make_streak_filter(- 0.1 * qah.circle, 100, 25, 1, 2)),
    )

demo_image = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_ARGB32,
    dimensions = (256, 256)
  )
g = \
    (qah.Context.create(demo_image)
        .set_matrix(Transform.scale(demo_image.dimensions))
        .set_source_colour(Colour.grey(0, 1))
        .set_operator(CAIRO.OPERATOR_SOURCE)
        .paint()
        .set_source_colour(Colour.grey(1, 1))
    )
nr_dirns = 6
for i in range(nr_dirns) :
    (g
        .save()
        .transform
            (
                Transform.rotate(i / nr_dirns * qah.circle, (0.5, 0.5))
            *
                Transform.translate(Point(1, 1) * 0.65)
            *
                Transform.scale(Point(1, 1) / 8)
            )
        .rectangle(qah.Rect(0, 0, 1, 1))
        .fill()
        .restore()
    )
#end for

nr_cols = math.ceil(math.sqrt(len(filters)))
nr_rows = math.ceil(len(filters) / nr_cols)
margin = Point(10, 10)
top_extra = 40
draw_bounds = qah.Rect.from_dimensions(demo_image.dimensions)
pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_ARGB32,
    dimensions =
            Point(nr_cols, nr_rows) * (draw_bounds.dimensions + margin)
        +
            margin
        +
            Point(0, top_extra)
  )
g = qah.Context.create(pix)
g.select_font_face("sans-serif", CAIRO.FONT_SLANT_NORMAL, CAIRO.FONT_WEIGHT_BOLD)
g.set_font_size(24)
title = "Pixman Convolution Filters"
text_extents = g.text_extents(title)
g.move_to \
  ((
    (pix.width - text_extents.width) / 2,
    text_extents.height + text_extents.y_bearing + top_extra / 2
  ))
g.source_colour = Colour.grey(0, 1)
g.show_text(title)

col = 0
row = 0
for i in range(len(filters)) :
    filter_name, filter_obj = filters[i]
    sys.stderr.write("doing filter %d/%d: %s..." % (i + 1, len(filters), filter_name))
    sys.stderr.flush() # show progress as convolutions might take some time
    dest_rect = \
        (
            draw_bounds
        +
            Point(col, row) * (draw_bounds.dimensions + margin)
        +
            margin
        +
            Point(0, top_extra)
        )
    g.matrix = draw_bounds.transform_to(dest_rect)
    g.operator = CAIRO.OPERATOR_SOURCE
    draw_filtered(g, demo_image, filter_obj, PIXMAN.REPEAT_PAD, Transform.identity)
    text_extents = g.text_extents(filter_name)
    g.move_to \
      ((
        draw_bounds.middle.x - text_extents.width / 2,
        draw_bounds.botright.y + text_extents.y_bearing + margin.y / 3
      ))
    g.operator = CAIRO.OPERATOR_DIFFERENCE
    g.source_colour = Colour.grey(1, 1)
    g.show_text(filter_name)
    col += 1
    if col == nr_cols :
        col = 0
        row += 1
    #end if
    sys.stderr.write(" done.\n")
#end for
pix.write_to_png("%s.png" % os.path.basename(sys.argv[0]))
